# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Product(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, product_id: int=None, name: str=None, price: float=None, category_name: str=None, quantity: int=None, release_date: date=None):  # noqa: E501
        """Product - a model defined in Swagger

        :param product_id: The product_id of this Product.  # noqa: E501
        :type product_id: int
        :param name: The name of this Product.  # noqa: E501
        :type name: str
        :param price: The price of this Product.  # noqa: E501
        :type price: float
        :param category_name: The category_name of this Product.  # noqa: E501
        :type category_name: str
        :param quantity: The quantity of this Product.  # noqa: E501
        :type quantity: int
        :param release_date: The release_date of this Product.  # noqa: E501
        :type release_date: date
        """
        self.swagger_types = {
            'product_id': int,
            'name': str,
            'price': float,
            'category_name': str,
            'quantity': int,
            'release_date': date
        }

        self.attribute_map = {
            'product_id': 'productId',
            'name': 'name',
            'price': 'price',
            'category_name': 'categoryName',
            'quantity': 'quantity',
            'release_date': 'releaseDate'
        }
        self._product_id = product_id
        self._name = name
        self._price = price
        self._category_name = category_name
        self._quantity = quantity
        self._release_date = release_date

    @classmethod
    def from_dict(cls, dikt) -> 'Product':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Product of this Product.  # noqa: E501
        :rtype: Product
        """
        return util.deserialize_model(dikt, cls)

    @property
    def product_id(self) -> int:
        """Gets the product_id of this Product.


        :return: The product_id of this Product.
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id: int):
        """Sets the product_id of this Product.


        :param product_id: The product_id of this Product.
        :type product_id: int
        """

        self._product_id = product_id

    @property
    def name(self) -> str:
        """Gets the name of this Product.


        :return: The name of this Product.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Product.


        :param name: The name of this Product.
        :type name: str
        """

        self._name = name

    @property
    def price(self) -> float:
        """Gets the price of this Product.


        :return: The price of this Product.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price: float):
        """Sets the price of this Product.


        :param price: The price of this Product.
        :type price: float
        """

        self._price = price

    @property
    def category_name(self) -> str:
        """Gets the category_name of this Product.


        :return: The category_name of this Product.
        :rtype: str
        """
        return self._category_name

    @category_name.setter
    def category_name(self, category_name: str):
        """Sets the category_name of this Product.


        :param category_name: The category_name of this Product.
        :type category_name: str
        """

        self._category_name = category_name

    @property
    def quantity(self) -> int:
        """Gets the quantity of this Product.

        ***Quantity*** represents `stock` value when this field is being sent by EazyShop.Where as in the scenarios of consumer sending this feild, it represents `number of product items` inside the order. Consumers are expected to handle the scenario of stopping the end user <u>*when the stock value is 0*</u>   # noqa: E501

        :return: The quantity of this Product.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity: int):
        """Sets the quantity of this Product.

        ***Quantity*** represents `stock` value when this field is being sent by EazyShop.Where as in the scenarios of consumer sending this feild, it represents `number of product items` inside the order. Consumers are expected to handle the scenario of stopping the end user <u>*when the stock value is 0*</u>   # noqa: E501

        :param quantity: The quantity of this Product.
        :type quantity: int
        """

        self._quantity = quantity

    @property
    def release_date(self) -> date:
        """Gets the release_date of this Product.


        :return: The release_date of this Product.
        :rtype: date
        """
        return self._release_date

    @release_date.setter
    def release_date(self, release_date: date):
        """Sets the release_date of this Product.


        :param release_date: The release_date of this Product.
        :type release_date: date
        """

        self._release_date = release_date
